---
import type { HTMLAttributes } from 'astro/types';
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';
import base_url from '@/src/lib/base_url';
import "./Card.css";

interface Props extends HTMLAttributes<'div'>{
  /** Vertical shows image on top, horizontal shows image on left side */
  orientation?: "horizontal" | "vertical";
  /** Disable the box shadow for the card */
  disableShadow?: boolean;
  /** Disable the border for the card */
  disableBorder?: boolean;
  /** Show an image on the card; accepts ImageMetadata or a Promise containing ImageMetadata */
  image?: ImageMetadata | Promise<{ default: ImageMetadata }>;
  /** Title for the card */
  title?: string;
  /** Card description */
  description?: string;
  /** Adding a link will make the card clickable */
  href?: string;
  /** Set the height of horizontal cards to ensure consistent card height */
  // cardHeight?: `${number}px` | `${number}%`;
  /** Set the image width of horizontal cards to ensure consistent image size */
  // imageWidth?: `${number}px` | `${number}%`;
  /** Set to true if the link goes to an external site (uses https instead of Astro) */
  isExternalLink?: boolean;
  classNames?: {
    image?: string,
    base?: string,
    content?: string,
  }
}

const { 
  orientation, 
  disableShadow, 
  disableBorder,
  image, 
  title,
  description,
  href,
  isExternalLink,
  classNames,
  // cardHeight,
  // imageWidth,
  ...rest 
} = Astro.props;

const Root = href ? "a" : "div";
const props = {
  ...(href && { "href": base_url(href) }),
  ...(href && isExternalLink && { "href": href, "target": "_blank", "rel": "noopener noreferrer" }),
  // ...(orientation == "horizontal" && cardHeight && { "style": `height: ${cardHeight};` }),
}
// const imgProps = {
//   ...(orientation === "horizontal" && cardHeight && { "style": `height: ${cardHeight};`}),
//   ...(orientation === "horizontal" && imageWidth && { "style": `width: ${imageWidth}px;`}),
// }
// const cheight = cardHeight ?? "100%";
// const iwidth = imageWidth ?? "150px";
---
<style>
  img {
    padding: 0;
    margin: 0;
  }
  a {
    text-decoration: none;
    color: inherit;
    margin: 0;
    padding: 0;
  }
  a:hover {
    text-decoration: none;
    font-weight: normal;
  }
</style>
<Root 
  class:list={[
    "card d-flex",
    {"card-vertical": orientation !== "horizontal", "card-horizontal": orientation === "horizontal"},
    {"card-shadow": !disableShadow},
    {"card-border": !disableBorder},
    classNames?.base
  ]} 
  {...props}
  {...rest}
>
  {image && 
    <Image 
      src={image} 
      alt={title ?? "No alt provided"} 
      class:list={[
        {"card-vertical-image": orientation !== "horizontal", "card-horizontal-image": orientation === "horizontal"}, 
        classNames?.image
      ]}
    />
  }
  <div 
    class:list={[
      {"card-vertical-content": orientation !== "horizontal", "card-horizontal-content": orientation === "horizontal"},
      classNames?.content
    ]}
  >
    {title && <h3>{title}</h3>}
    {description && <p>{description}</p>}
  </div>
</Root>