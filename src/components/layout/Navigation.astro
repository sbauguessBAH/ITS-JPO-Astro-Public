---
import base_url from "@/src/lib/base_url";
import { getTrimmedPathname, navigation } from "@/src/lib/navigation";

const pathname = Astro.url.pathname;
const trimmedPathname = getTrimmedPathname(pathname);
---

<nav class="navbar navbar-expand-lg navbar-dark bg-dark navbar-marginbottom">
  <div class="container-xl">
    <button
      class="navbar-toggler"
      type="button"
      data-toggle="collapse"
      data-target="#navbar-content"
      aria-controls="navbar-content"
      aria-expanded="false"
      aria-label="Toggle navigation"
    >
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbar-content">
      <ul class="navbar-nav mb-lg-0">
        {
          navigation.map((link) => (
            <li class:list={["nav-item dropdown", { activeMenu: trimmedPathname.startsWith(link.url) }]}>
              <a class="nav-link py-3 px-4 dropdown-toggle" id="navbarDropdown" href={base_url(link.url)}>
                {link.name}
              </a>
              <ul class="dropdown-menu mt-0 shadow" aria-labelledby="navbarDropdown">
                {link.pages.map((pageLink) => {
                  if (pageLink.isExternal)
                    return (
                      <li>
                        <a
                          class="dropdown-item externalLink"
                          href={base_url(pageLink.url)}
                          target="_blank"
                          rel="noopener noreferrer"
                        >
                          {pageLink.name}
                        </a>
                      </li>
                    );
                  if (pageLink.pages)
                    return (
                      <li class="dropend">
                        <a href={base_url(pageLink.url)} class="dropdown-item dropdown-toggle">
                          {pageLink.name}
                        </a>
                        <ul class="dropdown-menu shadow">
                          {pageLink.pages.map((subPageLink) => {
                            if (subPageLink.isExternal)
                              return (
                                <li>
                                  <a class="dropdown-item externalLink" href={subPageLink.url}>
                                    {subPageLink.name}
                                  </a>
                                </li>
                              );
                            if (subPageLink.pages) {
                              return (
                                <li class="dropend">
                                  <a href={base_url(subPageLink.url)} class="dropdown-item dropdown-toggle">
                                    {subPageLink.name}
                                  </a>
                                  <ul class="dropdown-menu shadow">
                                    {subPageLink.pages.map((grandChildLink) => (
                                      <li>
                                        <a class="dropdown-item" href={base_url(grandChildLink.url)}>
                                          {grandChildLink.name}
                                        </a>
                                      </li>
                                    ))}
                                  </ul>
                                </li>
                              );
                            } else {
                              return (
                                <li>
                                  <a
                                    class:list={[
                                      "dropdown-item",
                                      {
                                        disabled: [
                                          "ITS Professional Capacity Building",
                                          "Architecture, Standards, and Cybersecurity (ASC)",
                                        ].includes(subPageLink.name),
                                      },
                                    ]}
                                    href={base_url(subPageLink.url)}
                                  >
                                    {subPageLink.name}
                                  </a>
                                </li>
                              );
                            }
                          })}
                        </ul>
                      </li>
                    );
                  return (
                    <li>
                      <a class="dropdown-item" href={base_url(pageLink.url)}>
                        {pageLink.name}
                      </a>
                    </li>
                  );
                })}
              </ul>
            </li>
          ))
        }
      </ul>
    </div>
  </div>
</nav>

<script>
  // Makes navbar dropdowns open on hover

  // Ensure the DOM is fully loaded before running the script because Bootstrap's dropdown requires it
  document.addEventListener("DOMContentLoaded", () => {
    const navbar = document.querySelector(".navbar");
    if (!navbar) return;

    let dropdownShowTimeout;
    let dropdownHideTimeout;

    let currentDropdown;
    let lastDropdown;

    const dropdownLinks = navbar.querySelectorAll(".dropdown-toggle");

    dropdownLinks.forEach((dropdownLink) => {
      // Initialize Bootstrap dropdown instance
      const dropdown = bootstrap.Dropdown.getOrCreateInstance(dropdownLink);
      const dropdownMenu = dropdownLink.nextElementSibling;

      dropdownLink.addEventListener("mouseenter", () => {
        dropdownMenu!.classList.remove("fade-out");
        dropdownMenu!.classList.add("fade-in");

        currentDropdown = dropdownLink;
        if (currentDropdown === lastDropdown && dropdownHideTimeout) {
          clearTimeout(dropdownHideTimeout); // Clear the hide timeout if we're re-hovering the same dropdown
        }
        if (dropdownShowTimeout) {
          clearTimeout(dropdownShowTimeout); // Clear any existing timeout
        }
        dropdownShowTimeout = setTimeout(() => {
          dropdown.show();
        }, 200); // Delay before showing on hover
      });

      dropdownLink.addEventListener("click", (e) => {
        e.preventDefault(); // Prevent default link behavior
        const href = dropdownLink.getAttribute("href");
        if (!href || href === "#") return; // Ignore if no href or just a hash
        window.location.href = href; // Navigate to the link
      });

      // Add mouseleave listener to parent so that the dropdown closes when exiting link/sibling elements (dropdown menu)
      const parentElem = dropdownLink.closest("li");
      if (parentElem) {
        parentElem.addEventListener("mouseleave", () => {
          lastDropdown = currentDropdown; // Store the last hovered dropdown

          if (dropdownShowTimeout) {
            clearTimeout(dropdownShowTimeout); // Clear the timeout when leaving
          }

          dropdownHideTimeout = setTimeout(() => {
            dropdownMenu!.classList.remove("fade-in");
            dropdownMenu!.classList.add("fade-out");

            (dropdownLink as HTMLAnchorElement).blur(); // Removes :focus state from link

            dropdownMenu!.classList.add("keep-visible"); // Prevents dropdown menu from immediately disappearing from dropdown.hide()
            dropdown.hide();
            dropdownMenu!.addEventListener(
              "animationend",
              () => {
                dropdownMenu!.classList.remove("fade-out", "keep-visible");
              },
              { once: true }
            );
          }, 500); // Delay before hiding on mouse leave
        });
      }
    });
  });
</script>

<style scoped>
  a,
  ul,
  li,
  nav,
  button .show {
    transition: all 0.35s ease-in-out;
  }

  .dropdown-menu.keep-visible {
    display: block !important; /* Keep it visible even after Bootstrap removes 'show' */
  }

  a:active {
    background: rgb(198, 198, 198);
    color: black;
  }

  .dotlogo {
    max-height: 25px;
    object-fit: contain;
    object-position: 0%;
    padding-right: 10px;
    margin-top: 14px;
    margin-left: 30px;
  }

  .dropdown-menu {
    left: -1px;
  }

  .dropdown-toggle.show {
    color: black;
    background-color: white;
    border-radius: 10px 10px 0px 0px;
  }

  .show.nav-link:focus {
    color: black;
  }

  .dropdown-menu li > ul.dropdown-menu {
    border-radius: 10px;
  }

  .dropend .dropdown-toggle::after {
    content: "\f054";
    border: 0;
    color: #009ad6;
  }

  .dropdown-item.dropdown-toggle.show::after {
    content: "\f078";
    border: 0;
    color: #009ad6;
  }
  .dropdown-item.dropdown-toggle.show {
    background: rgb(233, 236, 239);
    border-radius: 0;
  }

  .fade-in {
    animation: fade-in 0.35s ease-in-out;
  }

  .fade-out {
    animation: fade-out 0.35s ease-in-out;
  }

  @keyframes fade-in {
    0% {
      opacity: 0;
    }
    100% {
      opacity: 1;
    }
  }

  @keyframes fade-out {
    0% {
      opacity: 1;
    }
    100% {
      opacity: 0;
    }
  }

  @media (max-width: 992px) {
    .navbar-marginbottom {
      margin-bottom: 0;
    }
  }
  .navbar-nav .nav-item.dropdown.show > .nav-link {
    font-weight: bold;
  }

  .dropend ul {
    margin-left: -0.1px; /* Prevents gap between dropend and menu items, which closes dropend on hover */
  }
</style>
