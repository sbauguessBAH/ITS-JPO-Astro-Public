---
import base_url from "@/src/lib/base_url";
import Layout from "../_layout.astro";
import { getEntry } from "astro:content";
import Card from "@/src/components/programs/card/Card.astro";
import CardBody from "@/src/components/programs/card/CardBody.astro";
import CardHeader from "@/src/components/programs/card/CardHeader.astro";
import { Image } from "astro:assets";
import ProgramSection from "@/src/components/programs/ProgramSection.astro";
import CardFooter from "@/src/components/programs/card/CardFooter.astro";
// import TrainingsLayout from "./_trainings-layout.astro";
// import CourseCard from "./_course-card.astro";

export const categories: { category?: string, title: string }[] = [
  { category: undefined, title: "All Courses" },
  { category: "its-basics", title: "ITS Basics" },
  { category: "its-architecture", title: "ITS Architecture" },
  { category: "systems-engineering", title: "Systems Engineering" },
  { category: "v2x", title: "Vehicle-to-Everything (V2X)" },
  { category: "tsmo", title: "Transportation Systems Management and Operations (TSMO)" },
  { category: "rwm", title: "Road Weather Management (RWM)" },
  { category: "tim", title: "Traffic Incident Management (TIM)" },
  { category: "cybersecurity", title: "Cybersecurity" },
  { category: "standards", title: "Standards" },
]

export function getStaticPaths() {
  return categories.map(item => ({
    params: {
      path: item.category
    },
    props: {
      title: item.title
    }
  }))
}

const { path } = Astro.params;
const { title } = Astro.props;

const courses = await getEntry("trainings", "trainings").then(row => row.data);
const filteredCourses = await getEntry("trainings", "trainings")
  .then(row => row.data
    .filter(row => path === undefined || row.category === path)
  );

const getCourseCount = (path?: string) => courses.filter(course => 
  path === undefined || path === course.category
).length;
---
<style>
  .trainings-container {
    display: flex;
    flex-direction: column;
    gap: var(--size);
  }

  @media (min-width: 992px) {
    .trainings-container {
      flex-direction: row;
    }

    .trainings-panel {
      flex-basis: 25%;
    }

    .trainings {
      flex-basis: 75%;
    }
    .course-grid {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: var(--size)
    }
  }
</style>
<style>
  .panel {
    border-radius: var(--radius-md);
    display: flex;
    flex-direction: column;
    border: 1px solid var(--border-light);
    /* box-shadow: var(--box-shadow); */
  }
  .panel-title {
    background: rgb(var(--color-brand-dark));
    color: white;
    border-radius: var(--radius-md) var(--radius-md) 0 0;
    padding: 1rem;
    text-transform: none;
    font-size: 1.4rem;
    margin: 0;
  }
  .panel-item {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    text-decoration: none;
    border-bottom: 1px solid var(--border-light);
    padding: 0.5rem 1rem;
    font-weight: 600;
    /* color: black; */
  }
  .panel-count {
    background: rgb(var(--color-gray-light));
    padding: 0 0.75rem;
    height: 1.5rem;
    border-radius: var(--radius-lg)
  }
  .panel-item:hover {
    font-weight: 600;
    background: rgb(var(--color-brand-light));
  }
  .panel-item-active {
    background: rgb(var(--color-brand-light));
  }
  .panel-item-active .panel-count {
    background: rgb(var(--color-brand-dark));
    color: white;
  }
  .panel-item-active:hover {
    background: rgb(var(--color-brand-light));
  }
</style>
<style>
  .course-card:hover {
    box-shadow: var(--box-shadow-lg);
    background: rgba(var(--color-brand-light), 0.5);
  }
  .course-card-header {
    padding: 0;
    position: relative;
  }
  .course-card-image {
    width: 100%;
    height: 200px;
    object-fit: cover;
  }
  .course-card-type {
    margin: 0;
    text-transform: uppercase;
    font-weight: 600;
    position: absolute;
    top: 0;
    left: 0;
    padding: 0.5rem 1rem;
    /* color: rgb(var(--color-gray)); */
    color: white;
    background: rgb(var(--color-brand));
  }
  .course-card-title {
    text-transform: none;
    margin: 0;
    padding: 0;
    font-size: 1.2rem;
    font-weight: 600;
  }
  .course-card-body {
    padding: var(--size);
  }
  .course-card-category {
    margin: 0;
    text-transform: uppercase;
    font-weight: 600;
    color: rgb(var(--color-gray));
  }
  .course-card-footer {
    padding: var(--size);
    /* background: rgb(var(--color-gray-light)) */
    color: rgb(var(--color-gray))
  }
</style>
<Layout>
  <main class="program-main">
    <ProgramSection>
      <h2 class="program-title-lg mb-4">
        ITS Trainings
      </h2>
      <p class="program-text">
        The ITS PCB Program offers a comprehensive suite of trainings covering a range 
        of topics from foundational concepts to emerging transportation technologies. 
        Discover and take these free trainings to help enhance your ITS knowledge and skills.
      </p>
      <p class="program-text mb-4">
        For National Highway Institute (NHI) Trainings, the link will take you to the NHI catalog. From there, you can
        search for the course you're interested in.
      </p>
      <div class="trainings-container">
        <div class="trainings-panel">
          <nav class="panel">
            <h3 class="panel-title">Categories</h3>
            {categories.map(item => (
              <a 
                class:list={["panel-item", {"panel-item-active": item.category === path }]}
                href={base_url(`/resources/pcb/trainings/${item.category ?? ""}`)}
                data-bs-toggle="tooltip" 
                data-bs-title={item.title} 
              >
                <div class="panel-item-text">
                  {item.title}
                </div>
                <div class="panel-count">
                  {getCourseCount(item.category)}
                </div>
              </a>
            ))}
          </nav>
        </div>
        <div class="trainings">
          <!-- <div class="course-grid">
            {filteredCourses.map(course => (
              <CourseCard {...course}/>
            ))}
          </div> -->
          <div class="course-grid">
            {filteredCourses.map(course => (
              <Card 
                href={course.url} 
                isExternal={course.isExternal} 
                shadow="sm" 
                radius="md"
                class="course-card"
              >
                <CardHeader class="course-card-header">
                  {course.image &&
                    <Image
                      src={course.image}
                      alt={course.alt ?? "No alt provided"}
                      class="course-card-image"
                    />
                    <p class="course-card-type">
                      {course.type}
                    </p>
                  }
                </CardHeader>
                <CardBody class="course-card-body">
                  <p class="course-card-category">
                      {course.category.replace("-", " ")}
                    </p>
                  <h3 class="course-card-title mb-2">
                    {course.title}
                  </h3>
                  <p class="course-card-description">
                    {course.description}
                  </p>
                </CardBody>
                {course.action === "Register" && (
                  <CardFooter class="course-card-footer">
                    This link will take you to the NHI Catalog. Search for the course name or number to register.
                  </CardFooter>
                )}
              </Card>
            ))}
          </div>
        </div>
      </div>
    </ProgramSection>
  </main>
</Layout>